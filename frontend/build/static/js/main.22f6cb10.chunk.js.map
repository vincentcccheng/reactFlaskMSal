{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useState","React","useEffect","AddPetForm","props","name","setName","species","setSpecies","age","setAge","onSubmit","e","preventDefault","setPets","prev","concat","id","Date","now","value","onChange","target","placeholder","LikeArea","likeCount","setLikeCount","onClick","Pet","filter","pet","Footer","SetToken","jsonResult","setJsonResult","fetch","then","response","json","data","status","res","token","GetToken","tokenResult","setTokenResult","TimeArea","toLocaleString","theTime","setTheTime","interval","setInterval","clearInterval","OurHeader","className","App","pets","localStorage","getItem","JSON","parse","setItem","stringify","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22f6cb10.chunk.js","sourcesContent":["import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nconst useState = React.useState\nconst useEffect = React.useEffect\n\n// function ExampleComponent() {\n//   return (\n//     <div>\n//       <h1>This is sour app d! </h1>\n//       <p>The sky is blue</p>\n//     </div>\n//   )\n// }\n\n// ReactDOM.render(<ExampleComponent />, document.querySelector(\"#app\"))\n\nfunction App() {\n  const [pets, setPets] = useState([])\n\n  // only run once the first time this component is rendered\n  useEffect(() => {\n    if (localStorage.getItem(\"examplePetData\")) {\n      setPets(JSON.parse(localStorage.getItem(\"examplePetData\")))\n    }\n  }, [])\n\n  // run every time our pet state changes\n  useEffect(() => {\n    localStorage.setItem(\"examplePetData\", JSON.stringify(pets))\n  }, [pets])\n\n  return (\n    <>\n      <OurHeader />\n      <LikeArea />\n      <TimeArea />\n      <AddPetForm setPets={setPets} />\n      <ul>\n        {pets.map(pet => (\n          <Pet setPets={setPets} id={pet.id} name={pet.name} species={pet.species} age={pet.age} key={pet.id} />\n        ))}\n      </ul>\n      <SetToken />\n\t  <GetToken />\n      <Footer />\n    </>\n  )\n}\n\nfunction AddPetForm(props) {\n  const [name, setName] = useState()\n  const [species, setSpecies] = useState()\n  const [age, setAge] = useState()\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    props.setPets(prev => prev.concat({ name, species, age, id: Date.now() }))\n    setName(\"\")\n    setSpecies(\"\")\n    setAge(\"\")\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <fieldset>\n        <legend>Add New Pet</legend>\n        <input value={name} onChange={e => setName(e.target.value)} placeholder=\"Name\" />\n        <input value={species} onChange={e => setSpecies(e.target.value)} placeholder=\"species\" />\n        <input value={age} onChange={e => setAge(e.target.value)} placeholder=\"age in years\" />\n        <button>Add Pet</button>\n      </fieldset>\n    </form>\n  )\n}\n\nfunction LikeArea() {\n  const [likeCount, setLikeCount] = useState(0)\n\n  function increaseLikeHandler() {\n    setLikeCount(function (prev) {\n      return prev + 1\n    })\n  }\n\n  function decreaseLikeHandler() {\n    setLikeCount(prev => {\n      if (prev > 0) {\n        return prev - 1\n      }\n      return 0\n    })\n  }\n\n  return (\n    <>\n      <button onClick={increaseLikeHandler}>Increase likes</button>\n      <button onClick={decreaseLikeHandler}>Decrease likes</button>\n      <h2>This page has been liked {likeCount} times.</h2>\n    </>\n  )\n}\n\nfunction Pet(props) {\n  function handleDelete() {\n    props.setPets(prev => prev.filter(pet => pet.id != props.id))\n  }\n\n  return (\n    <li>\n      {props.name} is a {props.species} and is {props.age} years old.\n      <button onClick={handleDelete}>Delete</button>\n    </li>\n  )\n}\n\nfunction Footer() {\n  return <small>Copyright Footer Text</small>\n}\n\nfunction SetToken() {\n  const [jsonResult, setJsonResult] = useState(\"No Token\")\n\n  function updateJson() {\n\tfetch(\"/setToken\").then(response =>\n      response\n        .json()\n        .then(data => ({\n          data: data,\n          status: response.status\n        }))\n        .then(res => {\n          setJsonResult(res.data.token)\n        })\n    )\n  }\n  return (\n    <>\n      <button onClick={updateJson}>Update Token</button>\n      <h1>The Token Result is \"{jsonResult}\"</h1>\n    </>\n  )\n}\n\n\nfunction GetToken() {\n  const [tokenResult, setTokenResult] = useState(\"\")\n\n  function getToken() {\n    //fetch(\"https://blueprint1.azurewebsites.net/getjson\").then(response =>\n\tfetch(\"/getToken\").then(response =>\n      response\n        .json()\n        .then(data => ({\n          data: data,\n          status: response.status\n        }))\n        .then(res => {\n          setTokenResult(res.data.token)\n        })\n    )\n  }\n  return (\n    <>\n      <button onClick={getToken}>Get Token</button>\n      <h1>The Token Result is \"{tokenResult}\"</h1>\n    </>\n  )\n}\n\n\nfunction TimeArea() {\n  const [theTime, setTheTime] = useState(new Date().toLocaleString())\n\n  useEffect(() => {\n    const interval = setInterval(() => setTheTime(new Date().toLocaleString()), 1000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [])\n\n  return <p>The current time is {theTime}.</p>\n}\n\nfunction OurHeader() {\n  return <h1 className=\"special\">Our Amazing App Header</h1>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}